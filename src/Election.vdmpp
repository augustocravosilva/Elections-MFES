class Election

types
	public Person = token;
	public Candidate = seq of char;
	public Register = map Person to bool;


instance variables
	--registers for each electoralOfficial
	public electoralRegisters: seq of Register := [];
	private finalElectoralRegisters: seq of Register := [];
	public officials: seq of ElectoralOfficial := [];
	-- candidates
	public candidates: set of Candidate := {};
	
	-- invariant: a person is only in one register
	inv card dom (merge elems electoralRegisters) = sumCountsMaps(electoralRegisters)

operations
	-- Election class constructor
	-- returns created object 
	public Election: () ==> Election
		Election() == 
			return self;
	
	-- Register initialization
	-- R1: every Person in argument "reg" must not had voted
	-- R2: every Person in "electoralRegister" must not had voted
	public setRegister: seq of Election`Register ==> ()
		setRegister(reg) ==
			 electoralRegisters := reg   
	pre forall voted in set elems reg & forall person in set rng voted & person = false
	post forall voted in set elems electoralRegisters & forall person in set rng voted & person = false;
	
	-- Electoral officials initialization
	-- the officials should already have their machines
	-- R1: electoral register must be initialized
	-- R2: size of electoral register must be equal to the size of argument "off"
	-- R3: registers must be correctely distributed by electoral officials
	public setOfficials: seq of ElectoralOfficial ==> ()
		setOfficials(off) == (
			 officials := off;
			 for all index in set inds officials 
			 		do officials(index).setRegister(electoralRegisters(index));	
			 )
	pre len electoralRegisters > 0 and
		len electoralRegisters = len off
	post forall i in set inds officials & officials(i).register =  electoralRegisters(i);
			 
	-- Adding access cards to electoral officials
	-- after initiating electoral officials and machines
	public initCodes: () ==> ()
		initCodes() == (
			for all official in set elems officials 
			 		do (
			 			dcl x: token := mk_token(1); 
			 			official.setCard(x);
			 ) 
		)
	pre forall off in set elems officials & off.vcardSet=false
	post forall off in set elems officials & off.vcardSet;
		
	-- Adding candidates
	public setCandidates: set of Candidate ==> ()
		setCandidates(cand) == (
			candidates := cand union {"blank"};
			for all official in set elems officials do  
			 			official.machine.setCandidates(candidates);
		)
	pre "blank" not in set cand;
		
	public countVotes: () ==> map Candidate to nat
		countVotes() == (
		 	dcl votes: map Candidate to nat := { |-> };
		 	
		 	for all candidate in set candidates do
				votes := votes munion {candidate |-> 0};
				
		 	for all official in set elems officials do
			 	for all candidate in set dom official.machine.votes do
			 		votes := votes ++ {candidate |-> (votes(candidate) + official.machine.votes(candidate))};
			 		
	 		return votes;
		)
	pre forall off in set elems officials & off.machine.status = <End>
	post card dom ((merge elems finalElectoralRegisters):>{true}) = sum(RESULT);
				
	-- Turn on voting machines
	public turnOnMachines: () ==> ()
		turnOnMachines() == (
			for all official in set elems officials do  
			 			official.machine.turnOn(official.vcard);
		)
	pre forall off in set elems officials & off.machine.status = <Off>
	post forall off in set elems officials & off.machine.status = <Ready>;
		
	-- End election
	public endElection: () ==> ()
		endElection() == (
			for all index in set inds officials do (  
			 	officials(index).machine.endVoting();
			 	finalElectoralRegisters(index) := officials(index).register;)
		)
	pre forall off in set elems officials & off.machine.status = <Ready>
	post forall off in set elems officials & off.machine.status = <End>;
	
		
functions

   private sum: map seq of char to nat -> nat
    sum(a) ==
	    ( let x in set dom a
	    	in let resto = dom a \ {x}
	    		in if resto = {} then a(x)
	    		else a(x) + sum(resto <: a)
	    );
    
   private sumCountsMaps: seq of Register -> nat
    sumCountsMaps(a) ==
	    ( if a = [] then 0 else
	    	let h = hd a
	    	in let t = tl a 
	    		in if t = [] then card dom h
	    		else card dom h + sumCountsMaps(t)
	    );
					
end Election