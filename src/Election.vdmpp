class Election

types
	public Person = token;
	public Candidate = seq1 of char;

instance variables
	private register: set of Person := {};
	private voters: set of Person := {};
	private votes: map Candidate to nat := { |-> };
	
operations
	
	-- Election class constructor
	-- returns created object 
	public Election: () ==> Election
		Election() == 
			return self;

	-- Candidates initialization
	-- R1: all candidates in argument cand must have 0 votes
	-- R2: all candidates in votes must have 0 votes
	public setCandidates: map Candidate to nat ==> ()
		setCandidates(cand) ==
			votes := cand
	pre forall c in set rng cand & c = 0
	post forall vote in set rng votes & vote = 0;
			
	-- Possible voters initialization
	public setRegister: set of Person ==> ()
		setRegister(reg) ==
			register := reg;
			
	-- Vote scenario
	-- R1: person voting hasn't voted yet and is registered
	-- R2: after voting, the person in voters
	public vote: Person * Candidate ==> ()
		vote(person, candidate) == (
			votes := votes ++ {candidate |-> votes(candidate) + 1 } ;
			voters := voters union {person} )
	pre person in set register and
		person not in set voters
	post person in set voters;
	
	-- TODO: Ver se a pessoa é valida e autorizar votação
	-- public validateVoter: () ==> ()
		--validateVoter() == ();
		
	-- TODO: registar o voto da pessoa sem associar na mesma função voto + pessoa
	-- public doVote: () ==> ()
		-- doVote() == ();
	
	-- TODO: opção de cancelar/mudar voto
	
	-- TODO: fecho das votações e eleição de candidato
	
end Election