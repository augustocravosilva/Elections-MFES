class Election

types
	public Person = token;
	public Candidate = seq1 of char;
	public Register = map Person to bool;


instance variables
	private electoralRegisters: set of Register := {};
	private officials: set of ElectoralOfficial := {};
	

operations
	-- Election class constructor
	-- returns created object 
	public Election: () ==> Election
		Election() == 
			return self;
			
	-- Possible voters initialization
	-- R1: every Person in argument "reg" must not had voted
	-- R2: every Person in "electoralRegister" must not had voted
	public setRegister: set of Register ==> ()
		setRegister(reg) ==
			 electoralRegisters := reg;
	------- TODO: pre forall voted in set rng reg & voted = false
	------- TODO: post forall voted in set rng electoralRegister & voted = false;
	
	-- Electoral officials initialization
	public setOfficials: set of ElectoralOfficial ==> ()
		setOfficials(off) ==
			 officials := off;
			
	-------- TODO: pensar noutra forma de fazer isto, sem usar o static (porque os cartoes de memoria nao sabem o estado uns dos outros)
	--public finishElection: () ==> map Election1`Candidate to nat1
		--finishElection() ==

end Election