class ElectoralOfficial

types
	public Card = token;
	

instance variables
	public machine: VotingMachine := new VotingMachine();
	public register: Election`Register := { |-> };
	public vcard: Card := mk_token(1);
	public vcardSet: bool := false;

operations
	-- ElectoralOfficial class constructor
	-- returns created object 
	public ElectoralOfficial: () ==> ElectoralOfficial
		ElectoralOfficial() == (
			return self
		); 
	
	-- Validate person
	-- R1: if person in register, after validation should me marked as he voted and the vcard
	--    should be returned
	-- R2: if person not in register or already voted he isn't allowed to vote and it is
	--	  returned nil
	public validatePerson: Election`Person ==> [Card]
		validatePerson(person) == (
			if person in set dom register and register(person) = false then (
				register := register ++ { person |-> true };
				return vcard;)
			else
				return nil;
			)
	post person in set dom register => register(person) = true;
	-- and person in set dom register and register(person)~ = false => RESULT <> nil; -- not supported
	
	-- Validation card for the voting machine is set
	-- R1: vCard must not yet been set
	-- R2: machine's card must be set and equal to electoralOfficial's card
	public setCard: Card ==> ()
		setCard(car) == (
			vcard := car;
			vcardSet := true;
			machine.setCards(car);
		)
	pre not vcardSet
	post machine.vcard = car 
		and machine.vcardSet;
	
	-- Initialize register
	-- R1: no one in register has voted yet
	-- R2: during operation no one has voted 
	public setRegister: Election`Register ==> ()
		setRegister(reg) ==
			 register := reg
	pre forall person in set rng reg & not person and register = { |-> }
	post forall person in set rng register & not person;
	
	
			 
end ElectoralOfficial