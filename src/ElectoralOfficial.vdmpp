class ElectoralOfficial

types
	public Card = token;
	
values
-- TODO Define values here


instance variables
	--private machines: set of VotingMachine;
	private machine: VotingMachine;
	private register: map Election1`Person to bool := Election1`electoralRegister;
	public validationCard: Card;
	
	
operations

	public ElectoralOfficial: () ==> ElectoralOfficial
		ElectoralOfficial() == 
			return self;
	
	public 
	
	-- Validate person
	-- R1: "person" must be in electoral register
	-- R2: "person" must not had voted already
	public validatePerson: Election1`Person ==> Card
		validatePerson(person) == (
			register := register ++ { person |-> true };
			return validationCard;
			)
	pre person in set dom register and
		register(person) = false;
	
	
	-- Initialize voting machines		
	public initializeMachines: VotingMachine ==> ()
		initializeMachines(mach) ==
			machine := mach;
	
	-- Validation card for the voting machine
	public setCard: Card ==> ()
		setCard(car) ==
			validationCard := car;

functions
-- TODO Define functiones here


traces
-- TODO Define Combinatorial Test Traces here


end ElectoralOfficial