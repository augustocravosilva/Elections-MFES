class VotingMachine

types
	public Status = <Off> | <Ready> | <OnVoting> | <End>;
	public MemCard = map Election`Candidate to nat;

instance variables
	public status : Status := <Off>; 
	public vcard : ElectoralOfficial`Card := mk_token(1);
	public vcardSet : bool := false;
	public choice : Election`Candidate := "";
	public votes: MemCard := { |-> };

	-- invariant: when machine is working it has a vcard set
	inv (status = <Ready> or status = <OnVoting>) => vcardSet;
	-- invariant: the choice must be valid
	inv choice in set(dom votes union {""});
	-- invariant: if choice not empty then state = <OnVoting>
	inv choice <> "" => status = <OnVoting>;
	
operations
 	-- Election class constructor
	-- returns created object 
 	public VotingMachine: () ==> VotingMachine
 		VotingMachine() == (
 			return self;
 			);
 	
 	-- Initialize memory and validation cards
 	-- R1: before operation, status must be <Off> and card must not been entered yet
 	-- R2: after the operation, machine status must still be <Off> and card must be entered
 	public setCards: ElectoralOfficial`Card ==> ()
 		setCards(vcard1) == (
 			vcard := vcard1;
 			vcardSet := true;
 	)
 	pre status = <Off> and
 			not vcardSet
 	post status = <Off> and
 			vcardSet;
 	
 	-- Turn on the voting machine
 	-- R1: the access card used must be equal to the one that machine accepts
 	-- R2: memory card must be already inserted
 	-- R3: voting machine must be on <Off> state
 	public turnOn: ElectoralOfficial`Card ==> ()
 		turnOn(vcard1) == (
 			status := <Ready>
 	)
 	pre vcard1 = vcard
 		and card dom votes > 0
 		and status = <Off>;
 	
 	-- Candidates votes initialization
 	-- R1: voting machine must be on <Off> state
 	-- R2: there isn't any memory card inserted yet
 	-- R3: initially, all candidates must have zero votes 
	public setCandidates: set of Election`Candidate * ElectoralOfficial`Card ==> ()
		setCandidates(candidates, vcard1) == (
			for all candidate in set candidates do
				votes := votes munion {candidate |-> 0}
			)
	pre vcard1 = vcard
		and status = <Off>
		and card dom votes = 0
	post
		forall vote in set rng votes & vote = 0;
 	
 	-- Validate access card and make machine ready to receive vote
 	-- R1: before operation, machine must be on <Ready> status
 	-- R2: access card must be valid
	public validateCard: ElectoralOfficial`Card ==> ()
		validateCard(vcard1) == atomic (
			status := <OnVoting>;
			choice := ""
			)
	pre status = <Ready> and
		vcard1 = vcard;
	--post status = <OnVoting>;
		
	-- Voter selects candidate
	-- R1: machine is on <OnVoting> status
	-- R2: argument "cand" is a valid candidate (is on memory card)
	public chooseCandidate: Election`Candidate ==> ()
		chooseCandidate(cand) ==
			choice := cand
	pre status = <OnVoting> and
		cand in set dom votes; 
 
 	-- Add vote to candidate indicated in current choice
	-- R1: machine is on <OnVoting> status
	-- R2: candidate "choice" must be present in votes
	-- R3: candidates must not change
	-- R4: at the end, candidate "choice" must have one more vote 
	public confirmChoice: () ==> ()
		confirmChoice() == atomic(
			status := <Ready>;
			votes := votes ++ {choice |-> votes(choice)+1};
			choice := "";
			)
 	pre status = <OnVoting> and
 		choice in set dom votes
 	post dom votes = dom votes~;
 	-- not suported
	-- post votes = votes~ ++ { candidate |-> votes(candidate)~ + 1 };
 		
	-- Clear choice made
	-- R1: machine is on <OnVoting> status
	public cleanSelection: () ==> ()
		cleanSelection() ==
			choice := ""
 	pre status = <OnVoting>;
 	
 	-- End voting 
 	-- R1: must insert the valid validation card
 	-- R1: machine is on <Ready> status
	public endVoting: ElectoralOfficial`Card ==> ()
		endVoting(vcard1) == (
			status := <End>;
		)
	pre vcard = vcard1
		and status = <Ready>;
		
	-- End election 
 	-- R1: must insert the valid validation card
 	-- R1: machine is on <End> status
	public endElection: ElectoralOfficial`Card ==> ()
		endElection(vcard1) == (
			status := <Off>;
			vcardSet := false;
		)
	pre vcard = vcard1
		and status = <End>;
		
	
	-- Get memory card
	-- R1: need to insert valid validation card
	-- R2: Only when election ended is allowed	
	public getVotes: ElectoralOfficial`Card ==> MemCard
		getVotes(vcard1) ==
			return votes
	pre vcard = vcard1
		and status = <End>;
	

end VotingMachine