class VotingMachine

types
	public Status = <Off> | <Ready> | <OnVoting> | <End>;

values
-- TODO Define values here

instance variables
	public status : Status := <Off>; 
	public mcard : MemoryCard;
	public choice : MemoryCard`Candidate := "";

operations
 	-- Election class constructor
	-- returns created object 
 	public VotingMachine: () ==> VotingMachine
 		VotingMachine() ==
 			return self;
 	
 	-- Initialize memory card
 	-- R1: before operation, status must be <Off> 
 	public setMemoryCard: MemoryCard ==> ()
 		setMemoryCard(mcard1) == (
 			mcard := mcard1;
 			status := <Ready>
 	)
 	pre status = <Off>;
 	
 	-- Machine ready to receive vote
 	-- R1: before operation, status must be <Ready> 
 	-- TODO: change to validateCard: recebe-se um cartao que a pessoa recebeu e ve-se se é valido ou nao
	public validateCard: () ==> ()
		validateCard() ==
			status := <OnVoting>
	pre status = <Ready>;
	
	-- Select candidate
	-- R1: machine is on <OnVoting> status
	-- R2: argument "cand" is a valid candidate (is on memory card)
	public chooseCandidate: MemoryCard`Candidate ==> ()
		chooseCandidate(cand) ==
			choice := cand
	pre status = <OnVoting> and
		cand in set dom mcard.votes; 
 
 	-- "Submit" vote
	-- R1: machine is on <OnVoting> status
	public confirmChoice: () ==> ()
		confirmChoice() == (
			if choice <> ""  then	mcard.addVote(choice);
			status := <Ready>
			)
 	pre status = <OnVoting>;
 
 	-- Change candidate choice
	-- R1: machine is on <OnVoting> status
	-- R2: argument "cand" is a valid candidate (is on memory card)
 public changeChoice: MemoryCard`Candidate ==> ()
		changeChoice(cand) ==
			choice := cand
 	pre status = <OnVoting> and
		cand in set dom mcard.votes; 

	-- Change to "white" vote
	-- R1: machine is on <OnVoting> status
	public cleanSelection: () ==> ()
		cleanSelection() ==
			choice := ""
 	pre status = <OnVoting>;
 	
 	-- Give up on voting
	-- R1: machine is on <OnVoting> status
 	public cancelVote: () ==> ()
 		cancelVote() == (
 			choice := "";
 			status := <Ready>
 			)
 	pre status = <OnVoting>;
 	
 	-- End election
 	-- TODO: finalizar processo - termina a cena toda -> os dados estao no cartao de memoria
 	-- R1: machine is on <Ready> status
	public endVoting: () ==> ()
		endVoting() ==
			status := <End>
	pre status = <Ready>;
 

functions
-- TODO Define functiones here


traces
-- TODO Define Combinatorial Test Traces here


end VotingMachine