class TestElection is subclass of MyTestCase

operations

 	/***** USE CASE SCENARIOS ******/
	
	-- Normal scenario for configuring the election,
	-- as described in section 2.1 of the report, covering requirements R5,R11.
	public configureElectionScn: seq of Election`Register * seq of ElectoralOfficial ==> Election
	configureElectionScn(register, officials) == (
			dcl election : Election := new Election();
			election.setRegister(register);
			election.setOfficials(officials);
			return election;
	)
	post RESULT.electoralRegisters = register 
	     and RESULT.officials = officials;

	-- Normal scenario for configuring the ElectoralOfficials,
	-- as described in section 2.1 of the report, covering requirements R6,R7,R10.
	public configureOfficialsScn: Election * set of Election`Candidate ==> ()
	configureOfficialsScn(election, candidates) == (
			election.initCodes(); 
			election.setCandidates(candidates);
			election.turnOnMachines();
	);
	     		
	-- Normal scenario for validating and autorizing a voter,
	-- as described in section 2.1 of the report, covering requirements R8,R12.
	public validateVoterScn: ElectoralOfficial * Election`Person ==> () 
	validateVoterScn(official, person) == (
		dcl vcard: ElectoralOfficial`Card := official.validatePerson(person);
		assertEqual(vcard, official.vcard);
		official.machine.validateCard(vcard); 
		assertEqual(vcard, official.machine.vcard);
	)
	pre person in set dom official.register and
				official.register(person) = false
	post official.register(person) = true;
				
	-- Normal scenario for choosing a candidate and save the vote,
	-- as described in section 2.1 of the report, covering requirements R7,R9,R10,R13.
	public voteScn: ElectoralOfficial * Election`Candidate ==> () 
	voteScn(official, candidate) == (
		official.machine.chooseCandidate(candidate);
		official.machine.confirmChoice();
	)
	pre official.machine.status = <OnVoting> and
		candidate in set dom official.machine.votes
	post official.machine.status = <Ready>;
		-- not suported
		-- official.machine.votes = official.machine.votes~ + { candidate |-> official.machine.votes(candidate)+1}

	-- Exceptional voting scenario in which the voter changes candidate option before saving
	-- as described in section 2.1 of the report, covering requirement R14.
	public changeVoteScn: ElectoralOfficial * Election`Candidate * Election`Candidate ==> () 
	changeVoteScn(official, candidate1, candidate2) == (
		official.machine.chooseCandidate(candidate1);
		official.machine.cleanSelection();
		official.machine.chooseCandidate(candidate2);
		official.machine.confirmChoice();
	)
	pre official.machine.status = <OnVoting> and
		candidate1 in set dom official.machine.votes and
		candidate2 in set dom official.machine.votes
	post official.machine.status = <Ready>;
	-- not suported
		-- official.machine.votes = official.machine.votes~ + { candidate2 |-> official.machine.votes(candidate2)+1}
	
	-- Exceptional voting scenario in which the voter votes in blank
	-- as described in section 2.1 of the report, covering requirement R10.
	public blankVoteScn: ElectoralOfficial ==> () 
	blankVoteScn(official) == (
		official.machine.chooseCandidate("blank");
		official.machine.confirmChoice();
	)
	pre official.machine.status = <OnVoting>
	post official.machine.status = <Ready>;
	-- not suported
		-- official.machine.votes = official.machine.votes~ + { "blank" |-> official.machine.votes("blank")+1}
	
	-- Exceptional voting scenario in which the voter tries to vote again
	-- as described in section 2.1 of the report, covering requirement R12.
	public alreadyVotedScn: ElectoralOfficial * Election`Person ==> () 
		alreadyVotedScn(official, person) == (
			dcl vcard: [ElectoralOfficial`Card] := official.validatePerson(person);
			assertEqual(vcard, nil);
	)
	pre person in set dom official.register and
				official.register(person) = true and
				official.machine.status = <Ready> 
	post official.register(person) = true and
				official.machine.status = <Ready>;
				
	-- Exceptional voting scenario in which a person isn't in register
	-- as described in section 2.1 of the report, covering requirement R11.
	public notInRegisterScn: ElectoralOfficial * Election`Person ==> () 
		notInRegisterScn(official, person) == (
			dcl vcard: [ElectoralOfficial`Card] := official.validatePerson(person);
			assertEqual(vcard, nil);
	)
	pre person not in set dom official.register
		and official.machine.status = <Ready> 
	post official.machine.status = <Ready>;
	
	
	
	/***** TEST CASES WITH VALID INPUTS ******/
	
	-- Entry point that runs all tests with valid inputs
  public testAll: () ==> ()
  	testAll() == (
  		testConf();
  		testValidate2Times();
  		testNotInRegister();
  		testCompleteElection();		
  );
	
	-- Test elections' configuration
	-- use case 1 and 2
	-- configure election with 3 ElectoralOfficials, 5 voters and 4 candidates
	-- Testing scenarios: configureOfficialsScn
	public testConf: () ==> () 
		testConf() == (
			dcl off : ElectoralOfficial := new ElectoralOfficial();
			dcl off1 : ElectoralOfficial := new ElectoralOfficial();
			dcl off2 : ElectoralOfficial := new ElectoralOfficial();
			dcl person1 : Election`Person := mk_token(1);
			dcl person2 : Election`Person := mk_token(2);
			dcl person3 : Election`Person := mk_token(3);
			dcl person4 : Election`Person := mk_token(4);
			dcl person5 : Election`Person := mk_token(5);
			dcl elc : Election := configureElectionScn([{person1 |-> false, person2 |-> false}, {person3 |-> false, person4 |-> false}, {person5 |-> false}], [off, off1, off2]);
			configureOfficialsScn(elc, {"a","b","c","d"});
	
			for all official in set elems elc.officials do
				assertEqual(dom official.machine.votes, {"a","b","blank","c","d"});
			);
	
	-- Test trying to validate two times
	-- most relevant use case: 3
	-- Testing scenarios:
	--    - configureOfficialsScn
	--    - validateVoterScn
	--    - voteScn
	--    - alreadyVotedScn
	public testValidate2Times: () ==> ()
		testValidate2Times() == (
			dcl off : ElectoralOfficial := new ElectoralOfficial();
			dcl off1 : ElectoralOfficial := new ElectoralOfficial();
			dcl person1 : Election`Person := mk_token(1);
			dcl person2 : Election`Person := mk_token(2);
			dcl elc : Election := configureElectionScn([{person1 |-> false}, {person2 |-> false}], [off, off1]);
			dcl votes : map Election`Candidate to nat := { |-> };
			configureOfficialsScn(elc, {"a","b","c","d"});
			
			validateVoterScn(off, person1); 
			voteScn(off, "a");
			
			alreadyVotedScn(off, person1);
			elc.endVoting();
			
			votes := elc.countVotes();
			assertEqual (votes("a"), 1);
			assertEqual (votes("b"), 0);
			assertEqual (votes("blank"), 0);
			assertEqual (votes("c"), 0);
			assertEqual (votes("d"), 0);
			--IO`print(votes);
			elc.endElection();
		);
	
	-- Test full election scenario
	-- use case 3
	-- Testing scenarios:
	--    - configureOfficialsScn
	--    - notInRegisterScn
	public testNotInRegister: () ==> ()
		testNotInRegister() == (
			dcl off : ElectoralOfficial := new ElectoralOfficial();
			dcl person1 : Election`Person := mk_token(1);
			dcl person2 : Election`Person := mk_token(2);
			dcl elc : Election := configureElectionScn([{person1 |-> false}], [off]);
			configureOfficialsScn(elc, {"a","b","c","d"});
			
			notInRegisterScn(off, person2);
		);
		
	-- Test full election scenario
	-- use cases 3 & 4 & 5
	-- configure election with 3 ElectoralOfficials, 6 voters and 4 candidates
	-- Testing scenarios:
	--    - configureOfficialsScn
	--    - validateVoterScn
	--    - voteScn
	--    - notInRegisterScn
	--    - changeVoteScn
	--    - blankVoteScn
	--    - alreadyVotedScn
	public testCompleteElection: () ==> () 
		testCompleteElection() == (
			dcl off : ElectoralOfficial := new ElectoralOfficial();
			dcl off1 : ElectoralOfficial := new ElectoralOfficial();
			dcl off2 : ElectoralOfficial := new ElectoralOfficial();
			dcl person1 : Election`Person := mk_token(1);
			dcl person2 : Election`Person := mk_token(2);
			dcl person3 : Election`Person := mk_token(3);
			dcl person4 : Election`Person := mk_token(4);
			dcl person5 : Election`Person := mk_token(5);
			dcl person6 : Election`Person := mk_token(6);
			dcl elc : Election := configureElectionScn([{person1 |-> false, person2 |-> false}, {person3 |-> false, person4 |-> false, person6 |-> false}, {person5 |-> false}], [off, off1, off2]);
			dcl votes : map Election`Candidate to nat := { |-> };
			configureOfficialsScn(elc, {"a","b","c","d"});
			
			validateVoterScn(off, person1); 
			voteScn(off, "a");
			
			validateVoterScn(off, person2); 
			voteScn(off, "a");
			
			notInRegisterScn(off, person3);
			
			validateVoterScn(off1, person3); 
			changeVoteScn(off1, "b", "a");
			
			validateVoterScn(off1, person4); 
			voteScn(off1, "b");
			
			validateVoterScn(off2, person5); 
			changeVoteScn(off2, "b", "d");
			
			validateVoterScn(off1, person6); 
			blankVoteScn(off1);
			
			alreadyVotedScn(off2, person5);
			
			elc.endVoting();
			votes := elc.countVotes();
			
			assertEqual (off.machine.votes("a"), 2);
			
			assertEqual (off1.machine.votes("a"), 1);
			assertEqual (off1.machine.votes("b"), 1);
			assertEqual (off1.machine.votes("blank"), 1);
			
			assertEqual (off2.machine.votes("d"), 1);
			
			assertEqual (votes("a"), 3);
			assertEqual (votes("b"), 1);
			assertEqual (votes("blank"), 1);
			assertEqual (votes("c"), 0);
			assertEqual (votes("d"), 1);
			--IO`print(votes);
			elc.endElection();
			);
	
			
		/***** TEST CASES WITH INVALID INPUTS ******/
		
	-- Entry point that runs tests with invalid inputs
  -- Run one by one 
  public testAllInvalidTests: () ==> ()
  	testAllInvalidTests() == (
  		--testVoteUnauth();
  		--testVoteInvalidCandidate();
  		--testCountBeforeEnd();
  		--testDuplicatePerson();
  		--testInsertCardWrongCredentials();
  		testGetCardWrongCredentials();
  		--testEndElectionWrongCredentials();
  );
	
	-- Invalid test: trying to vote without being authorized before 
	public testVoteUnauth: () ==> () 
		testVoteUnauth() == (
			dcl off : ElectoralOfficial := new ElectoralOfficial();
			dcl person1 : Election`Person := mk_token(1);
			dcl elc : Election := configureElectionScn([{person1 |-> false}], [off]);
			configureOfficialsScn(elc, {"a","b"});
			
			-- missing validateVoterScn(off, person1); 
			voteScn(off, "a");
			);
		
	-- Invalid test: trying to vote in a candidate not present in the election
	public testVoteInvalidCandidate: () ==> () 
	testVoteInvalidCandidate() == (
		dcl off : ElectoralOfficial := new ElectoralOfficial();
		dcl person1 : Election`Person := mk_token(1);
		dcl elc : Election := configureElectionScn([{person1 |-> false}], [off]);
		configureOfficialsScn(elc, {"a","b"});
		
		validateVoterScn(off, person1); 
		voteScn(off, "candidate");
		);
		
	-- Invalid test: trying to count votes before ending election
	public testCountBeforeEnd: () ==> () 
		testCountBeforeEnd() == (
			dcl off : ElectoralOfficial := new ElectoralOfficial();
			dcl person1 : Election`Person := mk_token(1);
			dcl elc : Election := configureElectionScn([{person1 |-> false}], [off]);
			dcl votes : map Election`Candidate to nat := { |-> };
			
			configureOfficialsScn(elc, {"a","b"});
			validateVoterScn(off, person1); 
			voteScn(off, "a");
			-- missing elc.endVoting();
			votes := elc.countVotes();
		);
			
	-- Invalid test: unique person invariant violation
	public testDuplicatePerson: () ==> () 
		testDuplicatePerson() == (			
		dcl off : ElectoralOfficial := new ElectoralOfficial();
		dcl off1 : ElectoralOfficial := new ElectoralOfficial();
		dcl person1 : Election`Person := mk_token(1);
		dcl person2 : Election`Person := mk_token(1);
		dcl elc : Election := configureElectionScn([{person1 |-> false}, {person2 |-> false}], [off, off1]);
		assertEqual(elc,elc);	 -- this will never run because inv will not hold
		-- if this runs then test fails, because we're expecting an error
		);
		
	-- Invalid test: trying to insert memory card with wrong valdation card
	public testInsertCardWrongCredentials: () ==> () 
		testInsertCardWrongCredentials() == (			
		dcl officials : seq of ElectoralOfficial := [new ElectoralOfficial(), new ElectoralOfficial()];
		dcl people : seq of map Election`Person to bool := [{mk_token(1) |-> false}, {mk_token(2) |-> false}];
		dcl candidates: set of Election`Candidate := {"a","b","c","d"};
		dcl vCard: ElectoralOfficial`Card := mk_token(55);
		dcl election : Election := new Election();
		
		election.setRegister(people);
		election.setOfficials(officials);
		-- election.setCandidates(candidates);
			
		for all official in set elems election.officials do  
		 	official.machine.setCandidates(candidates, vCard);
		);
		
	-- Invalid test: trying to get memory card with wrong valdation card
	public testGetCardWrongCredentials: () ==> () 
		testGetCardWrongCredentials() == (			
		dcl officials : seq of ElectoralOfficial := [new ElectoralOfficial(), new ElectoralOfficial()];
		dcl people : seq of map Election`Person to bool := [{mk_token(1) |-> false}, {mk_token(2) |-> false}];
		dcl candidates: set of Election`Candidate := {"a","b","c","d"};
		dcl vCard: ElectoralOfficial`Card := mk_token(55);
		dcl election : Election := configureElectionScn(people, officials);
		configureOfficialsScn(election, candidates);
		election.endVoting();
		 	
		assertEqual(election.officials(1).machine.getVotes(vCard)("a"), 0);
			
		);
		
	-- Invalid test: trying to end election with wrong valdation card
	public testEndElectionWrongCredentials: () ==> () 
		testEndElectionWrongCredentials() == (			
		dcl officials : seq of ElectoralOfficial := [new ElectoralOfficial(), new ElectoralOfficial()];
		dcl people : seq of map Election`Person to bool := [{mk_token(1) |-> false}, {mk_token(2) |-> false}];
		dcl candidates: set of Election`Candidate := {"a","b","c","d"};
		dcl vCard: ElectoralOfficial`Card := mk_token(55);
		dcl election : Election := configureElectionScn(people, officials);
		configureOfficialsScn(election, candidates);
		election.endVoting();
		
		for all official in set elems election.officials do   
		 	official.machine.endElection(vCard);
		
		);
		
end TestElection